# -*- coding: utf-8 -*-
"""Regresión_Logística.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bepMNFCmWG46KBhpJlmGOitHAvaLMdPl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive', force_remount=True) 
!pwd  # show current path

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/Clases/AD2022/Notebooks/"
!ls  # show current directory

X_train = pd.read_csv("X_train.csv") 
Y_train = pd.read_csv("Y_train.csv") 

X_test = pd.read_csv("X_test.csv") 
Y_test = pd.read_csv("Y_test.csv")  

X_train.head()

X_train = X_train.drop("Id", axis = 1) 
Y_train = Y_train.drop("Id", axis = 1) 
X_test = X_test.drop("Id", axis = 1) 
Y_test = Y_test.drop("Id", axis = 1)

X_train = X_train.values 
Y_train = Y_train.values 
X_test = X_test.values 
Y_test = Y_test.values

X_train = X_train.T 
Y_train = Y_train.reshape(1, X_train.shape[1]) 

X_test = X_test.T 
Y_test = Y_test.reshape(1, X_test.shape[1])

print("Shape of X_train : ", X_train.shape)
print("Shape of Y_train : ", Y_train.shape)

print("Shape of X_test : ", X_test.shape)
print("Shape of Y_test : ", Y_test.shape)

def sigmoid(x): 
  return 1/(1 + np.exp(-x))

def model(X, Y, learning_rate, iterations): 

  m = X_train.shape[1] 
  n = X_train.shape[0] 

  W = np.zeros((n,1)) 
  B = 0 
  cost_list = []
  for i in range(iterations): 

    Z = np.dot(W.T, X) + B 
    A = sigmoid(Z) 
    
    cost = -(1/m)*np.sum(Y*np.log(A) + (1-Y)*np.log(1-A)) 

    dW = (1/m)*np.dot(A-Y, X.T) 
    dB = (1/m)*np.sum(A-Y) 

    W = W - learning_rate*dW.T 
    B = B - learning_rate*dB 

    cost_list.append(cost) 

    if(i%(iterations/10) == 0):
        print("cost after", i, "iteration is : ", cost)

  return W, B, cost_list

iterations = 10000 
learning_rate = 0.0005 
W, B, cost_list = model(X_train, Y_train, learning_rate = learning_rate, iterations = iterations)

plt.plot(np.arange(iterations), cost_list)

def accuracy(X,Y,W,B): 
  Z = np.dot(W.T, X) + B 
  A = sigmoid(Z) 

  A = A > 0.5 

  A = np.array(A, dtype = 'int64') 

  acc = (1 - np.sum(np.absolute(A - Y))/Y.shape[1])*100 

  print("Accuracy of model is : ", acc, "%")

accuracy(X_test, Y_test, W, B)